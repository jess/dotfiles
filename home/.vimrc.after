"color default
"color railscasts
"set background=light
"
"
" new background
syntax enable
" solarized options 
set background=dark
"let g:solarized_termcolors = 256 
"let g:solarized_visibility = "high" 
"let g:solarized_contrast = "high" 
colorscheme solarized
"set noballooneval
"set guioptions-=T

" Esc Key Re map
inoremap jj <Esc>


au BufRead,BufNewFile *.php set filetype=php.html
"au BufRead,BufNewFile *.md set filetype=markdown
au BufRead,BufNewFile *.phtml set filetype=php.html
au BufRead,BufNewFile *.tpl set filetype=php.html
au BufRead,BufNewFile *.erb set filetype=eruby.html
au BufRead,BufNewFile *.scss set filetype=scss
au BufRead,BufNewFile *_spec.rb set filetype=ruby.ruby-rspec
set autoread

":let g:closetag_html_style=1
":source ~/.vim/scripts/closetag.vim
map <leader>c :ColorHEX<cr>
let g:NERDTreeMouseMode=1
map <leader>v ^vg_
map <leader>pp ^vg_S<p><cr>
map <leader>li ^vg_S<li><cr>
map <leader>s :Gstatus<cr>
map! <leader>sp &nbsp;

map <leader>notes :tabedit ~/websites/brownwebdesign.com/notes/views/index.markdown<cr>
map <leader>tasks :tabedit ~/Dropbox/tasks/bwd.taskpaper<cr>

"Markdown to HTML
" Convert whole page to markdown in place
nmap <leader>md :%!/usr/local/bin/Markdown.pl --html4tags <cr>
" Markdown save: Convert whole page, save as filename.html
nmap <leader>mds :%!/usr/local/bin/Markdown.pl --html4tags <cr>:saveas %.html<cr>
" Markdown copy:  Convert selection, open new page, copy html into mac buffer
map <leader>mdc y:tabedit/tmp/%<cr>p:set ft=html<cr>:%!/usr/local/bin/Markdown.pl --html4tags <cr>ggVG"*y
"imap <F8> <ESC>:w!<CR>:!markdown % \| smartypants > %.html && open %.html<CR><CR>a
"
"
" jess is commenting out to see what this even does--set guioptions=aAce

" toggle for vim room (minimal writer)
map <Leader>mz :VimroomToggle<cr>

map <Leader>y "*y
map <Leader>p "*p

nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

" Bubble single lines
"nmap <S-Up> [e
"nmap <S-Down> ]e
nmap <Esc>A [e
nmap <Esc>B ]e

" Bubble multiple lines
"vmap <S-Up> [egv
"vmap <S-Down> ]egv
vmap <Esc>B ]egv
vmap <Esc>A [egv

"set clipboard=unnamed
nnoremap gm :call cursor(0, len(getline('.'))/2)<cr>

" Terminal Mouse
set mouse=a
set ttym=xterm2


" use the silver searcher instead of ack
let g:ackprg = 'ag --nogroup --nocolor --column'


" Vertical Lines Indentation
let g:indent_guides_auto_colors = 0
hi IndentGuidesOdd  ctermbg=black
hi IndentGuidesEven ctermbg=black
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE (thanks Gary Bernhardt)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>rn :call RenameFile()<cr>


" Turn on spell-checking in markdown and text.
au BufRead,BufNewFile *.md,*.txt setlocal spell

" Fuzzy finder: ignore stuff that can't be opened, and generated files
let g:fuzzy_ignore = "*.png;*.PNG;*.JPG;*.jpg;*.GIF;*.gif;vendor/**;coverage/**;tmp/**;rdoc/**"
